 fun apply_n(f, n, x) {
  {
     return if (n == 0.0) then x else f(apply_n(f, n - 1.0, f(x)));
  }
}
 fun apply(f, x) {
  {
     return f(x);
  }
}
 fun fixpoint(f, x) {
  {
     return if (f(x) == x) then x else fixpoint(f, f(x));
  }
}
 fun double(f, x) {
  {
     return f(f(x));
  }
}
 fun test() {
  {
     let f =  inline_fun (x) => {
   return x + 1.0;
};
     let x = 0.0;
     let n = 10.0;
     let y = apply_n(f, n, x);
     let z = apply(f, x);
     let w = fixpoint(f, x);
     let v = double(f, x);
     print(y);
     print(z);
     print(w);
     print(v);
  }
}
 let Complex = {
  real : 0.0
  img : 0.0
  plus :  inline_fun (other) => {
   return {
  real : this.VarExpr(name=real) + other.VarExpr(name=real)
  img : this.VarExpr(name=img) + other.VarExpr(name=img)
};
}
  mul :  inline_fun (other) => {
   return {
  real : this.VarExpr(name=real) * other.VarExpr(name=real) - this.VarExpr(name=img) * other.VarExpr(name=img)
  img : this.VarExpr(name=real) * other.VarExpr(name=img) + this.VarExpr(name=img) * other.VarExpr(name=real)
};
}
};
 fun mandelbrot(c, maxIter) {
  {
     let z = c;
     let n = 0.0;
     while ((n < maxIter && (z.VarExpr(name=real) * z.VarExpr(name=real) + z.VarExpr(name=imag) * z.VarExpr(name=imag)) <= 4.0)) {
      {
        z = FieldAccess(lhs=ExpressionFunctionCall(target=FieldAccess(lhs=VarExpr(name=z), rhs=VarExpr(name=mul)), arguments=[VarExpr(name=z)]), rhs=VarExpr(name=plus))(c);
        n = n + 1.0;
      }
    }
     return n;
  }
}